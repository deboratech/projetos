import pandas as pd
import numpy as np
import seaborn as sb
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
#from sklearn.linear_model import LogisticRegression
#from sklearn.naive_bayes import GaussianNB 
from sklearn.linear_model import LinearRegression 
from sklearn.metrics import mean_squared_error, r2_score 
from sklearn.metrics import accuracy_score

# Importando Dataset
NOMEARQUIVO = "PdM_failures.csv"

def carregarDados(nomeArquivo):
    print("carregarDados")
    print("Nome arquivo: %s" % (nomeArquivo))

    dataFrame =  pd.read_csv(nomeArquivo, delimiter=",")

    return dataFrame

def preparacaoDados(dataFrame):
    print("preparacaoDados")

    # Informações sobre o DataFrame
    print(dataFrame.info())

    # Primeiras linhas
    print(dataFrame.head())

    # Últimas linhas
    print(dataFrame.tail())

    # Quantidade de linhas e colunas
    print(dataFrame.shape)

    # Dados estatísticos básicos
    print(dataFrame.describe().T)

    # Verificando dados nulos
    print(dataFrame.isnull().sum())

    # Verificando dados duplicados
    print(dataFrame.duplicated().sum())

    # Histograma de falhas das máquinas
    failures_machine = dataFrame['machineID'].value_counts()
    plt.bar(failures_machine.index, failures_machine.values)
    plt.xlabel('ID da Máquina')
    plt.ylabel('Número de Falhas')
    plt.title('Número de Falhas por Máquina')
    plt.show()

    # Ranking das 10 máquinas com mais falhas
    falhas_por_maquina = dataFrame['machineID'].value_counts()
    ranking = falhas_por_maquina.head(10)
    print("Ranking das 10 máquinas com mais falhas:")
    print(ranking)

    # Gráfico de barras do ranking
    ranking.plot(kind='bar')
    plt.xlabel('ID da Máquina')
    plt.ylabel('Número de Falhas')
    plt.title('Ranking das 10 Máquinas com Mais Falhas')
    plt.show()

    return dataFrame

if __name__ == '__main__':
    dataFrame = carregarDados(NOMEARQUIVO)

    dataFrame = preparacaoDados(dataFrame)

    # Convertendo a coluna de data/hora para timestamps Unix
    dataFrame['datetime'] = pd.to_datetime(dataFrame['datetime']).astype('int64') // 10**9

    # Separando os dados em conjunto de treino e teste (70% treino, 30% teste)
    #X = dataFrame.drop(columns=['failure'])  # Recursos
    #y = dataFrame['failure']  # Variável alvo
    #X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    # Treinando um modelo de Regressão Logística
    #modelo = LogisticRegression()
    #modelo.fit(X_train, y_train)

    # Prevendo os rótulos do conjunto de teste
    #y_pred = modelo.predict(X_test)

    # Calculando a acurácia do modelo
    #acuracia = accuracy_score(y_test, y_pred)
    #print("Acurácia do modelo:", acuracia)

    # Separando os dados em conjunto de treino e teste (70% treino, 30% teste)
    #X = dataFrame.drop(columns=['failure'])  # Recursos
    #y = dataFrame['failure']  # Variável alvo
    #X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    # Treinando um modelo de Naive Bayes
    #modelo = GaussianNB()
    #modelo.fit(X_train, y_train)

    # Prevendo os rótulos do conjunto de teste
    #y_pred = modelo.predict(X_test)

    # Calculando a acurácia do modelo
    #acuracia = accuracy_score(y_test, y_pred)
    #print("Acurácia do modelo:", acuracia)

    # Separando os dados em conjunto de treino e teste (70% treino, 30% teste)
    X = dataFrame.drop(columns=['failure'])  
    y = dataFrame['failure'].astype('category').cat.codes  
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    # Treinando um modelo de Regressão Linear
    modelo = LinearRegression()
    modelo.fit(X_train, y_train)

    # Prevendo os rótulos do conjunto de teste
    y_pred = modelo.predict(X_test)

    # Calculando métricas do modelo
    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    print("Mean Squared Error:", mse)
    print("R2 Score:", r2)

    # Convertendo previsões contínuas para categorias (0 ou 1)
    y_pred_classes = (y_pred > 0.5).astype(int)

    # Calculando a acurácia do modelo
    acuracia = accuracy_score(y_test, y_pred_classes)
    print("Acurácia do modelo:", acuracia)
